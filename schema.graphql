type Privileges {
    privilege(entityId: Int!): Privilege!
    list(searchString: String, pageIndex: Int, pageSize: Int, filters: [Predicate!]): [Privilege!]!
}

type InventoryItems {
    inventoryItem(entityId: Int!): InventoryItem!
    page(searchString: String, pageIndex: Int, pageSize: Int, filters: [Predicate!]): Page_InventoryItem!
    saveInventoryItem(inventoryItemId: Int!, level: Int!, maxLevelAllowed: Int!, minLevelAllowed: Int!, price: Float!, location: String!, inventoryId: Int!, dateExpiry: String, itemId: Int!): InventoryItem!
}

type Inventories {
    inventory(entityId: Int!): Inventory!
    list: [Inventory!]!
    saveInventory(inventoryId: Int!, name: String!, description: String!, allowNegativeStocks: Boolean!, status: String!): Inventory!
    saveInventoryItems(level: Int!, maxLevelAllowed: Int!, minLevelAllowed: Int!, price: Float!, location: String!, dateExpiry: String, inventoryId: Int!, itemIds: [Int!]!): [InventoryItem!]!
}

type Privilege {
    privilegeId: Int!
    key: String!
    name: String!
    description: String
    active: Boolean!
    createdDate: String
    modifiedDate: String
}

type Roles {
    role(entityId: Int!): Role!
    list(searchString: String, pageIndex: Int, pageSize: Int, filters: [Predicate!]): [Role!]!
}

type InventoryItem {
    inventoryItemId: Int!
    level: Int!
    maxLevelAllowed: Int!
    minLevelAllowed: Int!
    price: Float!
    location: String!
    dateExpiry: String
    inventory: Inventory!
    item: Item!
    createdDate: String!
    modifiedDate: String
}

input AddressArg {
    addressId: Int!
    street1: String!
    street2: String!
    street3: String!
    zip: String!
    city: String!
    state: String!
    country: String!
}

type Users {
    user(entityId: Int!): User!
    resetPassword(entityId: Int!): String!
    changePassword(userId: Int!, password: String!, newPassword: String!): Boolean!
    updatePassword(userId: Int!, password: String!): Boolean!
    list(searchString: String, pageIndex: Int, pageSize: Int, filters: [Predicate!]): [User!]!
}

type Person {
    personId: Int!
    firstName: String!
    lastName: String!
    documentType: String!
    documentId: String!
    createdDate: String!
    modifiedDate: String
    address(address: AddressArg): Address
    contactInfo(contactInfo: [ContactInfoArg!]): [ContactInfo!]!
    account(user: UserArg): User
}

type Maintenance {
    maintenanceId: Int!
    name: String!
    description: String
    status: String!
    createdDate: String!
    modifiedDate: String
    tasks: [Task!]!
    equipments: [Equipment!]!
}

input UserArg {
    userId: Int!
    username: String!
    email: String!
    status: String!
    language: String!
    expiration: Boolean!
}

type PageInfo {
    hasNext: Boolean!
    hasPreview: Boolean!
    pageSize: Int!
    pageIndex: Int!
}

type Category {
    categoryId: Int!
    name: String!
    description: String!
    createdDate: String!
    modifiedDate: String
}

type Page_InventoryItem {
    totalCount: Int!
    content: [InventoryItem!]!
    pageInfo: PageInfo!
    sort: Sort!
}

type Address {
    addressId: Int!
    street1: String!
    street2: String!
    street3: String!
    zip: String!
    city: String!
    state: String!
    country: String!
    createdDate: String!
    modifiedDate: String
}

type Page_Equipment {
    totalCount: Int!
    content: [Equipment!]!
    pageInfo: PageInfo!
    sort: Sort!
}

type Items {
    item(entityId: Int!): Item!
    page(searchString: String, pageIndex: Int, pageSize: Int, filters: [Predicate!]): Page_Item!
    saveItem(itemId: Int!, code: String!, name: String!, defaultPrice: Float!, description: String, partNumber: String, manufacturer: String, model: String, itemType: String!, notes: String, status: String!, images: [String!]!, categoryId: Int, unitId: Int): Item!
    changeItemStatus(entityIds: [Int!]!, status: String!): Boolean!
}

type Page_Person {
    totalCount: Int!
    content: [Person!]!
    pageInfo: PageInfo!
    sort: Sort!
}

type Equipments {
    equipment(entityId: Int!): Equipment!
    page(searchString: String, pageIndex: Int, pageSize: Int, filters: [Predicate!]): Page_Equipment!
    saveEquipment(equipmentId: Int!, name: String!, description: String, code: String!, partNumber: String, manufacturer: String, model: String, notes: String, status: String!, images: [String!]!, priority: Int!, hoursAverageDailyUse: Int!, outOfService: Boolean!, purchaseDate: String, parentId: Int): Equipment!
}

type Page_Maintenance {
    totalCount: Int!
    content: [Maintenance!]!
    pageInfo: PageInfo!
    sort: Sort!
}

type User {
    userId: Int!
    username: String!
    email: String!
    status: String!
    language: String!
    expiration: Boolean!
    newPasswordRequired: Boolean!
    createdDate: String!
    modifiedDate: String
    person: Person!
    privileges(privilegeIds: [Int!]): [Privilege!]!
    roles(roleIds: [Int!]): [Role!]!
}

input Predicate {
    field: String!
    operator: String!
    value: String!
    union: [Predicate!]
    conjunction: [Predicate!]
}

type Mutation {
    savePrivilege(privilegeId: Int!, key: String!, name: String!, description: String, active: Boolean!): Privilege!
    saveRole(roleId: Int!, key: String!, name: String!, description: String, active: Boolean!): Role!
    savePerson(personId: Int!, firstName: String!, lastName: String!, documentType: String!, documentId: String!): Person!
    saveCategory(categoryId: Int!, name: String!, description: String!): Category!
    saveUnit(unitId: Int!, key: String!, label: String!): Unit!
    saveTaskCategory(taskCategoryId: Int!, name: String!, description: String): TaskCategory!
    saveSubTaskKind(subTaskKindId: Int!, name: String!, description: String): SubTaskKind!
    inventoryItems: InventoryItems!
    items: Items!
    equipments: Equipments!
    inventories: Inventories!
    maintenances: Maintenances!
}

type EventTrigger {
    eventTriggerId: Int!
    name: String!
    description: String
    createdDate: String!
    modifiedDate: String
}

type Role {
    roleId: Int!
    key: String!
    name: String!
    description: String
    active: Boolean!
    createdDate: String!
    modifiedDate: String
    privileges: [Privilege!]!
}

type Inventory {
    inventoryId: Int!
    name: String!
    description: String!
    allowNegativeStocks: Boolean!
    status: String!
    inventoryItems(searchString: String, pageIndex: Int, pageSize: Int, filters: [Predicate!]): Page_InventoryItem!
    availableItems(searchString: String, pageIndex: Int, pageSize: Int, filters: [Predicate!]): Page_Item!
    createdDate: String!
    modifiedDate: String
}

input ContactInfoArg {
    contactId: Int!
    contact: String!
    contactType: String!
}

type Sort {
    isUnsorted: Boolean!
    isSorted: Boolean!
    direction: String!
}

type Query {
    session: Session!
    privileges: Privileges!
    roles: Roles!
    persons: Persons!
    users: Users!
    categories: [Category!]!
    units: [Unit!]!
    taskCategories: [TaskCategory!]!
    subTaskKinds: [SubTaskKind!]!
    inventories: Inventories!
    items: Items!
    equipments: Equipments!
    inventoryItems: InventoryItems!
    maintenances: Maintenances!
}

type Equipment {
    equipmentId: Int!
    name: String!
    description: String
    code: String!
    partNumber: String
    manufacturer: String
    model: String
    notes: String
    status: String!
    images: [String!]!
    priority: Int!
    hoursAverageDailyUse: Int!
    outOfService: Boolean!
    purchaseDate: String
    children(searchString: String, pageIndex: Int, pageSize: Int, filters: [Predicate!]): Page_Equipment!
    parent: Equipment
    category: Category!
    createdDate: String!
    modifiedDate: String
}

type TaskCategory {
    taskCategoryId: Int!
    name: String!
    description: String
    createdDate: String!
    modifiedDate: String
}

type Item {
    itemId: Int!
    code: String!
    name: String!
    defaultPrice: Float!
    description: String
    partNumber: String
    manufacturer: String
    model: String
    itemType: String!
    notes: String
    status: String!
    images: [String!]!
    category: Category
    unit: Unit
    inventoryItems(searchString: String, pageIndex: Int, pageSize: Int, filters: [Predicate!]): Page_InventoryItem!
    createdDate: String!
    modifiedDate: String
}

type TaskTrigger {
    taskTriggerId: Int!
    kind: String!
    description: String!
    fixedSchedule: Boolean
    frequency: Int
    readType: String
    limit: String
    repeat: Boolean
    operator: String
    value: String
    unit: Unit
    eventTrigger: EventTrigger
    createdDate: String!
    modifiedDate: String
}

type Task {
    taskId: Int!
    name: String!
    description: String
    priority: Int!
    duration: Int!
    downTimeDuration: Int!
    attribute1: String
    attribute2: String
    createdDate: String!
    modifiedDate: String
    taskCategory: TaskCategory
    subTasks: [SubTask!]!
    taskTriggers: [TaskTrigger!]!
}

input SubTaskArg {
    subTaskId: Int!
    order: Int!
    group: String!
    description: String
    mandatory: Boolean!
    subTaskKindId: Int
}

type Maintenances {
    maintenance(entityId: Int!): Maintenance!
    page(searchString: String, pageIndex: Int, pageSize: Int, filters: [Predicate!]): Page_Maintenance!
    saveMaintenance(maintenanceId: Int!, name: String!, description: String, status: String!): Maintenance!
    createUpdateTasks(maintenanceId: Int!, tasks: [TaskArg!]!): [Task!]!
    task(entityId: Int!): Task!
    eventTriggers: [EventTrigger!]!
    saveEventTrigger(eventTriggerId: Int!, name: String!, description: String): EventTrigger!
}

type Persons {
    person(entityId: Int!): Person!
    page(searchString: String, pageIndex: Int, pageSize: Int, filters: [Predicate!]): Page_Person!
}

type Unit {
    unitId: Int!
    key: String!
    label: String!
    createdDate: String!
    modifiedDate: String
}

type ContactInfo {
    contactId: Int!
    contact: String!
    contactType: String!
    createdDate: String!
    modifiedDate: String
}

type Session {
    authId: String!
    username: String!
    email: String!
    firstName: String!
    lastName: String!
    language: String!
    permissions: [String!]!
}

input TaskTriggerArg {
    taskTriggerId: Int!
    kind: String!
    description: String!
    fixedSchedule: Boolean
    frequency: Int
    readType: String
    limit: String
    repeat: Boolean
    operator: String
    value: String
    unitId: Int
    eventTriggerId: Int
}

type SubTaskKind {
    subTaskKindId: Int!
    name: String!
    description: String
    createdDate: String!
    modifiedDate: String
}

type Page_Item {
    totalCount: Int!
    content: [Item!]!
    pageInfo: PageInfo!
    sort: Sort!
}

input TaskArg {
    taskId: Int!
    name: String!
    description: String
    priority: Int!
    duration: Int!
    downTimeDuration: Int!
    attribute1: String
    attribute2: String
    taskCategoryId: Int
    subTasks: [SubTaskArg!]!
    taskTriggers: [TaskTriggerArg!]!
}

type SubTask {
    subTaskId: Int!
    order: Int!
    group: String!
    description: String
    mandatory: Boolean!
    createdDate: String!
    modifiedDate: String
    subTaskKind: SubTaskKind
}
